version: 2.1

orbs: 
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1

commands:
  notify_slack:
    description: Send slack notification on failure
    steps:
      - slack/notify:
          event: fail
          mentions: '@airahyusuff'
          template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     channel: C03Q56HMW4R
      #     mentions: '@airahyusuff'
      #     custom: |
      #       {
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "Hello, this job passed. carry on!"
      #             }
      #           }
      #         ]
      #       }

  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy created infrastructure if any job fails
          when: on_fail
          command: |
            echo "Destroying BE + FE infrastructure with workflowID --> << parameters.workflowID >>"
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>
        
jobs:
  build_frontend:
    docker:
      - image: cimg/node:16.13.1
    steps:
      - checkout
      - run:
          name: "Compile frontend"
          command: |
            cd frontend
            npm install
            npm run build
      - notify_slack

  build_backend:
    docker:
      - image: cimg/node:16.13.1
    steps:
      - checkout
      - run:
          name: "Compile backend"
          command: |
            cd backend
            npm install
            npm run build
      - notify_slack      
  
  test_frontend:
    docker:
      - image: cimg/node:16.13.1
    steps:
      - checkout
      - run:
          name: "Unit tests for frontend"
          command: |
            cd frontend
            npm install
            npm run test
      - notify_slack

  test_backend:
    docker:
      - image: cimg/node:16.13.1
    steps:
      - checkout
      - run:
          name: "Unit tests for backend"
          command: |
            cd backend
            npm install
            npm run test
      - notify_slack
  
  audit_frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Audit tests for frontend"
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_slack

  audit_backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: " tests for backend"
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - notify_slack

  deploy_infra:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/project
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1
      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
            echo "[all]" > ~/inventory.txt
            aws cloudformation list-exports --query "Exports[?Name==\`BackendInstanceDNS\`].Value" --no-paginate --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root:  ~/
          paths:
            - inventory.txt
      - notify_slack
      - destroy_environment

  configure_infra:
    docker:
      - image: python:3.8-alpine3.15
    working_directory: ~/project
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c4:7f:58:83:f1:c3:ec:1e:ad:dd:48:65:1e:21:d3:34"]
      - run:
          name: install openssh
          command: apk add --update openssh
      - run:
          name: Install dependencies
          command: |
            pwd
            apk add --update ansible
      - run: apk add --update tar gzip
      - attach_workspace:
          at: ~/project
      - run:
          name: Configure prometheus server
          command: |
            ansible-playbook server.yml -i ~/project/inventory.txt


workflows:
  default:
    jobs:
      # - build_frontend
      # - build_backend
      # - test_frontend:
      #     requires: [build_frontend]
      # - test_backend:
      #     requires: [build_backend]
      # - audit_frontend:
      #     requires: [build_frontend]
      # - audit_backend:
      #     requires: [build_backend]
      - deploy_infra
