version: 2.1

orbs: 
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1

commands:
  notify_slack:
    description: Send slack notification on failure
    steps:
      - slack/notify:
          event: fail
          mentions: '@airahyusuff'
          template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     channel: C03Q56HMW4R
      #     mentions: '@airahyusuff'
      #     template: basic_success_1

  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
        # default: ${CIRCLE_WORKFLOW_ID:0:7}
        default: aa0c901
    steps:
      - run:
          name: Destroy created infrastructure if any job fails
          when: on_fail
          command: |
            echo "Destroying BE + FE infrastructure with workflowID --> << parameters.workflowID >>"
            aws s3 rm s3://udapeople-<< parameters.workflowID >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>

  revert_migrations:
    description: Revert last migration
    parameters:
      workflowID:
        type: string
        # default: ${CIRCLE_WORKFLOW_ID:0:7}
        default: aa0c901     
    steps:
      - run:
          when: on_fail
          name: Revert migrations
          command: |
            cd backend
            npm install
            npm run migrations:revert
            export APPKEY=$(cat ~/project/keys.txt)
            SUCCESS=$(curl https://keyvalue.immanuel.co/api/KeyVal/GetValue/${APPKEY}/migration_<< parameters.workflowID >>)
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi    
jobs:
  build_frontend:
    docker:
      - image: cimg/node:16.13.1
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: "Compile frontend"
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node-modules]
          key: frontend-build
      - notify_slack

  build_backend:
    docker:
      - image: cimg/node:16.13.1
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: "Compile backend"
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node-modules]
          key: backend-build
      - notify_slack      
  
  test_frontend:
    docker:
      - image: cimg/node:16.13.1
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: "Unit tests for frontend"
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node-modules]
          key: frontend-build
      - notify_slack

  test_backend:
    docker:
      - image: cimg/node:16.13.1
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: "Unit tests for backend"
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node-modules]
          key: backend-build
      - notify_slack
  
  audit_frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: "Audit tests for frontend"
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node-modules]
          key: frontend-build
      - notify_slack

  audit_backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: " tests for backend"
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node-modules]
          key: backend-build
      - notify_slack

  deploy_infra:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure backend infrastructure exist
          command: |
            # aws cloudformation deploy --template-file .circleci/files/backend.yml --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} --tags project=udapeople
            aws cloudformation deploy --template-file .circleci/files/backend.yml --stack-name udapeople-backend-aa0c901 --parameter-overrides ID=aa0c901 --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            # aws cloudformation deploy --template-file .circleci/files/frontend.yml --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} --tags project=udapeople
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --stack-name udapeople-frontend-aa0c901 --parameter-overrides ID=aa0c901 --tags project=udapeople
      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
            aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:project, Values=udapeople" --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root:  ~/project
          paths:
            - .circleci/ansible/inventory.txt
      - notify_slack
      - destroy_environment

  configure_infra:
    docker:
      - image: python:3.8-alpine3.15
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5d:61:63:61:30:df:01:28:4a:25:aa:6f:58:1e:87:f1"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip
            apk add --update openssh
            apk add --update curl
            apk add --update ansible
      - run:
          name: Configure backend server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
      - notify_slack
      - destroy_environment

  run_migrations:
    docker:
      - image: cimg/node:16.13.1
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Save migration status to key with https://keyvalue.immanuel.co/
          command: |
            cd ..
            if grep -q "has been executed successfully." backend/migrations_dump.txt
            then
              APPKEY=$(curl https://keyvalue.immanuel.co/api/KeyVal/GetAppKey | tr -d '"')
              echo $APPKEY > ~/project/keys.txt
              cat keys.txt
              # curl --header "content-length:0" -X POST "https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/${APPKEY}/migration_${CIRCLE_WORKFLOW_ID:0:7}/1"
              curl --header "content-length:0" -X POST "https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/${APPKEY}/migration_aa0c901/1"
            fi
      - persist_to_workspace:
          root:  ~/project
          paths:
            - keys.txt
      - save_cache:
          paths: [backend/node-modules]
          key: backend-build
      - notify_slack

  deploy_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Python
          command: |
            yum install -y python3
      - run:
          name: Install Node and NPM
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            yum install -y nodejs
      - run:
          name: Install Ansible
          command: |
            python3 -m pip -V
            if [ $? -eq 0 ]
            then
              python3 -m pip install --user ansible
            fi
      - run:
          name: Get backend url
          command: |
            cat key.txt
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:project, Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - restore_cache:
          key: frontend-build
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            # tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            # aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            tar -czvf artifact-aa0c901.tar.gz dist
            aws s3 cp dist s3://udapeople-aa0c901 --recursive
      - save_cache:
          paths: [frontend/node-modules]
          key: frontend-build
      - notify_slack

  deploy_backend:
    docker:
      - image: python:3.8-alpine3.15
    working_directory: ~/project
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5d:61:63:61:30:df:01:28:4a:25:aa:6f:58:1e:87:f1"]
      - run: apk add --update tar gzip
      - attach_workspace:
          at: ~/project
      - run:
          name: Add Dependencies
          command: |
            apk add --update openssh
            apk add --update curl
            apk add --update npm
            apk add --update nodejs
            apk add --update ansible
      - restore_cache:
          key: backend-build
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files/
            cat .circleci/ansible/inventory.txt
            ansible-playbook .circleci/ansible/deploy-backend.yml -i .circleci/ansible/inventory.txt
      - save_cache:
          paths: [backend/node-modules]
          key: backend-build
      - notify_slack 

  smoke_tests:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5d:61:63:61:30:df:01:28:4a:25:aa:6f:58:1e:87:f1"]
      - run: apk add --update tar gzip
      - attach_workspace:
          at: ~/project
      - run: 
          name: Run backend smoke tests
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:project, Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then∫
                return 0
            else
                return 1
            fi
      - run: 
          name: Run frontend smoke tests
          command: |
            # URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            URL="http://udapeople-aa0c901.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      # - destroy_environment
      # - revert_migrations

workflows:
  default:
    jobs:
      # - build_frontend
      # - build_backend
      # - test_frontend:
      #     requires: [build_frontend]
      # - test_backend:
      #     requires: [build_backend]
      # - audit_frontend:
      #     requires: [build_frontend]
      # - audit_backend:
      #     requires: [build_backend]
      # - deploy_infra:
      #     requires: [test_backend, test_frontend, audit_backend, audit_frontend]
      # - configure_infra:
      #     requires: [deploy_infra]
      - run_migrations
          # requires: [configure_infra]
      - deploy_frontend:
          requires: [run_migrations]
      - deploy_backend:
          requires: [run_migrations]
      - smoke_tests:
          requires: [deploy_frontend, deploy_backend]
